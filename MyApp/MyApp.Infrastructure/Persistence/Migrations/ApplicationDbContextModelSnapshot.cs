// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyApp.Infrastructure.Persistence;

#nullable disable

namespace MyApp.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyApp.Domain.Entities.GitHubAccountLink", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("LastRefreshed")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LinkedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SecretName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("UserId");

                    b.ToTable("GitHubAccountLinks", (string)null);
                });

            modelBuilder.Entity("MyApp.Domain.Entities.UserExternalLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderAccountId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SecretName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("State")
                        .IsUnique();

                    b.HasIndex("UserId", "Provider")
                        .IsUnique();

                    b.ToTable("UserExternalLogins", (string)null);
                });

            modelBuilder.Entity("MyApp.Domain.Entities.GitHubAccountLink", b =>
                {
                    b.OwnsOne("MyApp.Domain.ValueObjects.GitHubIdentity", "Identity", b1 =>
                        {
                            b1.Property<Guid>("GitHubAccountLinkUserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AccountId")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("GitHubAccountId");

                            b1.Property<string>("AvatarUrl")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("GitHubAvatarUrl");

                            b1.Property<string>("DisplayName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("GitHubDisplayName");

                            b1.Property<string>("Login")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("GitHubLogin");

                            b1.HasKey("GitHubAccountLinkUserId");

                            b1.ToTable("GitHubAccountLinks");

                            b1.WithOwner()
                                .HasForeignKey("GitHubAccountLinkUserId");
                        });

                    b.Navigation("Identity")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
