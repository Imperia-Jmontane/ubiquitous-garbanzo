@model MyApp.Models.Profile.ProfileViewModel
@using System.Linq

@{
    ViewData["Title"] = "Perfil";
}

@{
    string linkSuccessMessage = TempData.ContainsKey("GitHubLinkSuccess") && TempData["GitHubLinkSuccess"] is string success ? success : string.Empty;
    string linkErrorMessage = TempData.ContainsKey("GitHubLinkError") && TempData["GitHubLinkError"] is string error ? error : string.Empty;
}

<section class="mx-auto max-w-4xl space-y-8 text-gray-100">
    <header class="rounded-3xl border border-white/10 bg-gray-900/80 p-6 shadow-inner shadow-black/20">
        <div class="space-y-3">
            <h1 class="text-2xl font-semibold text-white">Perfil y conexiones</h1>
            <p class="text-sm text-gray-300">Gestiona la conexión con GitHub para habilitar la importación de repositorios y flujos.</p>
        </div>
    </header>

    <article class="space-y-6 rounded-3xl border border-white/10 bg-gray-900/70 p-6 shadow-inner shadow-black/30">
        @if (!string.IsNullOrWhiteSpace(linkSuccessMessage))
        {
            <div class="rounded-2xl border border-emerald-500/30 bg-emerald-500/10 p-4 text-sm text-emerald-100">
                @linkSuccessMessage
            </div>
        }

        @if (!string.IsNullOrWhiteSpace(linkErrorMessage))
        {
            <div class="rounded-2xl border border-rose-500/30 bg-rose-500/10 p-4 text-sm text-rose-100">
                @linkErrorMessage
            </div>
        }
        <div class="flex flex-wrap items-start justify-between gap-4">
            <div>
                <h2 class="text-lg font-semibold text-white">GitHub OAuth</h2>
                <p class="mt-1 text-sm text-gray-400">Scopes requeridos: <span class="font-medium text-gray-200">@string.Join(", ", Model.GitHubScopes)</span></p>
            </div>
            <span class="inline-flex items-center gap-2 rounded-full px-3 py-1 text-xs font-semibold @(Model.GitHubConfigured ? "bg-emerald-500/10 text-emerald-300" : "bg-amber-500/10 text-amber-200")">
                <span class="size-2 rounded-full @(Model.GitHubConfigured ? "bg-emerald-400" : "bg-amber-400")"></span>
                @(Model.GitHubConfigured ? "Configurado" : "Pendiente")
            </span>
        </div>

        @if (Model.GitHubConfigured)
        {
            <div class="rounded-2xl border border-emerald-500/30 bg-emerald-500/10 p-4 text-sm text-emerald-100">
                <p>GitHub OAuth está habilitado. Client ID registrado: <span class="font-semibold">@Model.ClientIdPreview</span>.</p>
            </div>
        }
        else
        {
            <div class="rounded-2xl border border-amber-500/30 bg-amber-500/10 p-4 text-sm text-amber-100">
                <p>Aún no se configuraron los secretos de GitHub. Completa el proceso de bootstrap para habilitar la vinculación.</p>
                <div class="mt-3">
                    <a asp-controller="Bootstrap" asp-action="GitHub" class="inline-flex items-center gap-2 rounded-lg bg-amber-500 px-4 py-2 text-sm font-semibold text-white shadow-lg shadow-amber-900/40 transition hover:bg-amber-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-amber-400">
                        Configurar GitHub OAuth
                    </a>
                </div>
            </div>
        }

        <div class="flex flex-col gap-3 rounded-2xl border border-white/10 bg-gray-900/50 p-4"
             data-github-link
             data-user-id="@Model.UserId"
             data-redirect-uri="@Model.GitHubRedirectUri"
             data-github-configured="@(Model.GitHubConfigured ? "true" : "false")">
            <p class="text-sm text-gray-300">
                Vincula tu cuenta de GitHub para importar repositorios de forma segura. Esta acción solicitará autorización en GitHub y almacenará los tokens cifrados.
            </p>
            <div class="flex flex-wrap items-center gap-3">
                <button type="button"
                        data-github-link-button
                        class="inline-flex items-center gap-2 rounded-lg px-4 py-2 text-sm font-semibold shadow-lg transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-400 @(Model.GitHubConfigured ? "bg-indigo-500 text-white shadow-indigo-900/40 hover:bg-indigo-400" : "cursor-not-allowed bg-gray-700 text-gray-400 shadow-gray-900/30")"
                        @(Model.GitHubConfigured ? "" : "disabled=\"disabled\" aria-disabled=\"true\"")>
                    Vincular cuenta de GitHub
                </button>
                <span class="text-xs text-gray-400" data-github-link-status></span>
            </div>
        </div>

        <div class="rounded-3xl border border-white/10 bg-gray-900/50 p-4"
             data-flow-branch-preference
             data-endpoint="/api/profile/flow-branches"
             data-user-id="@Model.UserId"
             data-enabled="@(Model.CreateLinkedBranches ? "true" : "false")">
            <div class="flex items-center justify-between gap-4">
                <span class="flex grow flex-col">
                    <label class="text-sm font-medium text-white">Crear ramas vinculadas</label>
                    <span class="text-sm text-gray-400">Al cambiar a una rama remota, Flow creará una rama hermana <span class="font-semibold text-gray-200">Flow/&lt;nombre&gt;</span> y la sincronizará con los cambios entrantes.</span>
                </span>
                <div class="relative inline-flex w-11 shrink-0 rounded-full bg-white/5 p-0.5 transition-colors duration-200 ease-in-out"
                     data-flow-branch-preference-track>
                    <span class="size-5 rounded-full bg-white shadow-xs ring-1 ring-gray-900/5 transition-transform duration-200 ease-in-out"
                          data-flow-branch-preference-thumb></span>
                    <input type="checkbox"
                           class="absolute inset-0 appearance-none focus:outline-hidden"
                           aria-label="Crear ramas vinculadas"
                           data-flow-branch-preference-input />
                </div>
            </div>
            <p class="mt-3 text-xs text-gray-400" data-flow-branch-preference-status></p>
        </div>

        <div class="space-y-4 rounded-3xl border border-white/10 bg-gray-900/50 p-4"
             data-github-pat
             data-github-pat-endpoint="/api/github/personal-access-token"
             data-github-pat-status-endpoint="/api/github/personal-access-token/status"
             data-github-pat-initial='@Html.Raw(Model.PersonalAccessToken.ValidationJson)'>
            <div class="flex flex-wrap items-start justify-between gap-4">
                <div class="space-y-1">
                    <h2 class="text-lg font-semibold text-white">Personal Access Token (PAT)</h2>
                    <p class="text-sm text-gray-300">Necesario para clonar repositorios privados mediante HTTPS.</p>
                </div>
                <span class="inline-flex items-center gap-2 rounded-full px-3 py-1 text-xs font-semibold @(Model.PersonalAccessToken.IsConfigured ? "bg-emerald-500/10 text-emerald-300" : (Model.PersonalAccessToken.TokenStored ? "bg-rose-500/10 text-rose-200" : "bg-amber-500/10 text-amber-200"))"
                      data-github-pat-state>
                    <span class="size-2 rounded-full @(Model.PersonalAccessToken.IsConfigured ? "bg-emerald-400" : (Model.PersonalAccessToken.TokenStored ? "bg-rose-400" : "bg-amber-400"))" data-github-pat-indicator></span>
                    <span data-github-pat-label>@(Model.PersonalAccessToken.IsConfigured ? "Configurado" : (Model.PersonalAccessToken.TokenStored ? "Revisar" : "Pendiente"))</span>
                </span>
            </div>

            <div class="space-y-3 rounded-2xl border border-white/10 bg-gray-900/70 p-4">
                <p class="text-sm text-gray-300">Sigue estos pasos para generar el token y compartirlo con la aplicación:</p>
                <ol class="list-decimal space-y-2 pl-5 text-sm text-gray-300">
                    <li>
                        Ingresa a <a href="@Model.PersonalAccessToken.GenerationUrl" class="text-indigo-300 hover:text-indigo-200" target="_blank" rel="noopener noreferrer">la página de tokens de GitHub</a> y selecciona <span class="font-medium text-gray-100">Generate new token</span>.
                    </li>
                    <li>Elige <span class="font-medium text-gray-100">Fine-grained token</span> (recomendado) o un <span class="font-medium text-gray-100">Classic token</span> si prefieres los scopes tradicionales.</li>
                    <li>Concede al menos los siguientes permisos:</li>
                </ol>
                <ul class="list-disc space-y-1 pl-5 text-sm text-gray-300">
                    @foreach (string permission in Model.PersonalAccessToken.RequiredPermissions)
                    {
                        <li>@permission</li>
                    }
                </ul>
                <p class="text-sm text-gray-300">Una vez generado, copia el token porque GitHub solo lo muestra una vez.</p>
            </div>

            @{ bool patHasValidation = Model.PersonalAccessToken.Validation != null; }
            <div class="space-y-3 rounded-2xl border border-white/10 bg-gray-900/70 p-4"
                 data-github-pat-validation-container>
                <div class="rounded-2xl border border-amber-500/30 bg-amber-500/10 p-4 text-sm text-amber-100 @(patHasValidation ? "hidden" : string.Empty)"
                     data-github-pat-validation-empty>
                    <p>Aún no se comprobó el token. Guárdalo para validar que GitHub lo acepte y que tenga los permisos necesarios.</p>
                </div>

                <div class="space-y-4 @(patHasValidation ? string.Empty : "hidden")"
                     data-github-pat-validation-panel>
                    @{ string validationStateClass = patHasValidation ? (Model.PersonalAccessToken.Validation!.TokenAccepted ? (Model.PersonalAccessToken.Validation.HasRequiredPermissions ? "bg-emerald-500/15 text-emerald-200" : "bg-amber-500/15 text-amber-200") : "bg-rose-500/15 text-rose-200") : "bg-emerald-500/15 text-emerald-200"; }
                    @{ string validationStateLabel = patHasValidation ? (Model.PersonalAccessToken.Validation!.TokenAccepted ? (Model.PersonalAccessToken.Validation.HasRequiredPermissions ? "Token válido" : "Faltan permisos") : "Token rechazado") : "Token pendiente de verificación"; }
                    <div class="flex flex-wrap items-center gap-3">
                        <span class="inline-flex items-center gap-2 rounded-full px-3 py-1 text-xs font-semibold @validationStateClass"
                              data-github-pat-validation-state>
                            <span data-github-pat-validation-state-label>@validationStateLabel</span>
                        </span>
                        <span class="text-xs text-gray-400" data-github-pat-validation-login>
                            @if (patHasValidation && !string.IsNullOrWhiteSpace(Model.PersonalAccessToken.Validation!.Login))
                            {
                                <text>GitHub verificó el token para @Model.PersonalAccessToken.Validation.Login.</text>
                            }
                        </span>
                    </div>

                    <p class="text-xs text-gray-300" data-github-pat-validation-type>
                        @if (patHasValidation)
                        {
                            <text>Tipo de token: @(Model.PersonalAccessToken.Validation!.IsFineGrained ? "Fine-grained" : "Classic").</text>
                        }
                        else
                        {
                            <text>Tipo de token: desconocido.</text>
                        }
                    </p>
                    <p class="text-xs text-gray-300" data-github-pat-validation-repository>
                        @if (patHasValidation)
                        {
                            <text>Acceso a repos privados: @(Model.PersonalAccessToken.Validation!.RepositoryAccessConfirmed ? "Comprobado" : "No confirmado").</text>
                        }
                        else
                        {
                            <text>Acceso a repos privados: pendiente.</text>
                        }
                    </p>

                    <div class="grid gap-4 md:grid-cols-2">
                        <div class="space-y-2">
                            <h3 class="text-sm font-semibold text-gray-200">Permisos detectados</h3>
                            <ul class="list-disc space-y-1 pl-5 text-xs text-gray-300" data-github-pat-validation-granted>
                                @if (patHasValidation && Model.PersonalAccessToken.Validation!.GrantedPermissions.Any())
                                {
                                    foreach (string granted in Model.PersonalAccessToken.Validation.GrantedPermissions)
                                    {
                                        <li>@granted</li>
                                    }
                                }
                                else
                                {
                                    <li>No se detectaron scopes publicados por GitHub.</li>
                                }
                            </ul>
                        </div>
                        <div class="space-y-2">
                            <h3 class="text-sm font-semibold text-gray-200">Permisos faltantes</h3>
                            <ul class="list-disc space-y-1 pl-5 text-xs text-gray-300" data-github-pat-validation-missing>
                                @if (patHasValidation && Model.PersonalAccessToken.Validation!.MissingPermissions.Any())
                                {
                                    foreach (string missing in Model.PersonalAccessToken.Validation.MissingPermissions)
                                    {
                                        <li>@missing</li>
                                    }
                                }
                                else
                                {
                                    <li>No faltan permisos conocidos.</li>
                                }
                            </ul>
                        </div>
                    </div>

                    @{ bool hasWarnings = patHasValidation && (Model.PersonalAccessToken.Validation!.Warnings.Any(warning => !string.IsNullOrWhiteSpace(warning)) || !string.IsNullOrWhiteSpace(Model.PersonalAccessToken.Validation.FailureReason)); }
                    <div class="rounded-2xl border border-amber-500/30 bg-amber-500/10 p-4 text-xs text-amber-100 @(hasWarnings ? string.Empty : "hidden")"
                         data-github-pat-validation-warnings-wrapper>
                        <h3 class="text-sm font-semibold">Advertencias</h3>
                        <ul class="mt-2 space-y-1" data-github-pat-validation-warnings>
                            @if (hasWarnings)
                            {
                                foreach (string warning in Model.PersonalAccessToken.Validation!.Warnings)
                                {
                                    if (!string.IsNullOrWhiteSpace(warning))
                                    {
                                        <li>@warning</li>
                                    }
                                }

                                if (!string.IsNullOrWhiteSpace(Model.PersonalAccessToken.Validation.FailureReason))
                                {
                                    <li>@Model.PersonalAccessToken.Validation.FailureReason</li>
                                }
                            }
                            else
                            {
                                <li>No se registraron advertencias.</li>
                            }
                        </ul>
                    </div>
                </div>
            </div>

            <form class="space-y-3" data-github-pat-form>
                <div>
                    <label for="github-personal-access-token" class="block text-sm font-medium text-gray-200">Pega aquí el token generado</label>
                    <div class="mt-2 flex flex-col gap-3 sm:flex-row sm:items-center">
                        <input id="github-personal-access-token"
                               name="github-personal-access-token"
                               type="password"
                               autocomplete="off"
                               class="w-full rounded-xl border border-white/10 bg-white/5 px-4 py-3 text-sm text-white shadow-inner shadow-black/30 focus:border-indigo-400 focus:outline-none focus:ring-2 focus:ring-indigo-500/40"
                               placeholder="github_pat_..."
                               data-github-pat-input />
                        <button type="submit"
                                class="inline-flex items-center justify-center gap-2 rounded-lg bg-emerald-500 px-4 py-2 text-sm font-semibold text-white shadow-lg shadow-emerald-900/40 transition hover:bg-emerald-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-emerald-400"
                                data-github-pat-submit>
                            Guardar token
                        </button>
                    </div>
                </div>
                <p class="text-xs text-gray-400">Almacenar el PAT permite que el backend pueda clonar repositorios privados usando HTTPS. Se cifra con Data Protection antes de guardarse.</p>
                <p class="text-xs text-gray-400" data-github-pat-status></p>
            </form>
        </div>

        <div class="rounded-2xl border border-white/10 bg-gray-900/50 p-4">
            @{
                string defaultAvatarUrl = Url.Content("~/img/default-avatar.svg");
                string avatarUrlToUse = !string.IsNullOrWhiteSpace(Model.GitHubAccount.AvatarUrl) ? Model.GitHubAccount.AvatarUrl : defaultAvatarUrl;
                string displayName;
                if (Model.GitHubAccount.IsLinked && Model.GitHubAccount.DetailsAvailable)
                {
                    if (!string.IsNullOrWhiteSpace(Model.GitHubAccount.Name))
                    {
                        displayName = Model.GitHubAccount.Name;
                    }
                    else if (!string.IsNullOrWhiteSpace(Model.GitHubAccount.Login))
                    {
                        displayName = Model.GitHubAccount.Login;
                    }
                    else
                    {
                        displayName = "Perico el de los Palotes";
                    }
                }
                else
                {
                    displayName = "Perico el de los Palotes";
                }
            }
            <div class="flex flex-wrap items-center gap-4">
                <img src="@avatarUrlToUse" alt="Avatar de @displayName" class="size-14 rounded-full border border-white/10 shadow-md shadow-black/40" />
                <div class="flex-1 space-y-1">
                    <div class="flex items-center gap-2">
                        <h3 class="text-lg font-semibold text-white">Cuenta vinculada</h3>
                        @if (Model.GitHubAccount.IsLinked)
                        {
                            <span class="inline-flex items-center rounded-full bg-emerald-500/15 px-3 py-1 text-xs font-semibold text-emerald-200">Activa</span>
                        }
                        else
                        {
                            <span class="inline-flex items-center rounded-full bg-gray-600/30 px-3 py-1 text-xs font-semibold text-gray-300">Sin vincular</span>
                        }
                    </div>
                    <p class="text-sm text-gray-300">
                        <span class="font-medium text-white">@displayName</span>
                        @if (Model.GitHubAccount.IsLinked && Model.GitHubAccount.DetailsAvailable && !string.IsNullOrWhiteSpace(Model.GitHubAccount.Login))
                        {
                            @:·
                            <span class="font-medium text-gray-100">@Model.GitHubAccount.Login</span>
                        }
                        @if (Model.GitHubAccount.IsLinked && Model.GitHubAccount.DetailsAvailable && !string.IsNullOrWhiteSpace(Model.GitHubAccount.Email))
                        {
                            @:·
                            <a href="mailto:@Model.GitHubAccount.Email" class="text-indigo-300 hover:text-indigo-200">@Model.GitHubAccount.Email</a>
                        }
                    </p>

                    @if (!Model.GitHubAccount.IsLinked)
                    {
                        <p class="text-sm text-gray-400">Aún no hay una cuenta de GitHub vinculada para este usuario.</p>
                    }
                    else if (!Model.GitHubAccount.DetailsAvailable)
                    {
                        <p class="text-sm text-gray-400">No se pudieron obtener los detalles de la cuenta de GitHub.</p>
                    }
                </div>
                @if (Model.GitHubAccount.IsLinked && !string.IsNullOrWhiteSpace(Model.GitHubAccount.ProfileUrl))
                {
                    <a href="@Model.GitHubAccount.ProfileUrl"
                       class="inline-flex items-center gap-2 rounded-lg bg-indigo-500 px-4 py-2 text-sm font-semibold text-white shadow-lg shadow-indigo-900/40 transition hover:bg-indigo-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-400"
                       target="_blank"
                       rel="noopener noreferrer">
                        Ver en GitHub
                    </a>
                }
            </div>

            @if (Model.GitHubAccount.IsLinked)
            {
                <dl class="mt-4 grid gap-4 text-sm text-gray-300 sm:grid-cols-2">
                    <div class="space-y-1">
                        <dt class="font-semibold text-gray-200">Identificador externo</dt>
                        <dd class="break-all text-gray-400">@Model.GitHubAccount.ExternalUserId</dd>
                    </div>
                    <div class="space-y-1">
                        <dt class="font-semibold text-gray-200">Expira</dt>
                        <dd class="text-gray-400">
                            @if (Model.GitHubAccount.ExpiresAt.HasValue)
                            {
                                @Model.GitHubAccount.ExpiresAt.Value.ToLocalTime().ToString("f")
                            }
                            else
                            {
                                @:Desconocido
                            }
                        </dd>
                    </div>
                    <div class="space-y-1">
                        <dt class="font-semibold text-gray-200">Actualizable</dt>
                        <dd class="text-gray-400">@((Model.GitHubAccount.SupportsRefresh ? "Sí" : "No"))</dd>
                    </div>
                    <div class="space-y-1">
                        <dt class="font-semibold text-gray-200">Organizaciones</dt>
                        <dd class="text-gray-400">
                            @if (Model.GitHubAccount.Organizations.Count > 0)
                            {
                                <ul class="list-disc space-y-1 pl-4">
                                    @foreach (string organization in Model.GitHubAccount.Organizations)
                                    {
                                        <li>@organization</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                @:No se detectaron organizaciones asociadas.
                            }
                        </dd>
                    </div>
                </dl>
            }

            @if (!string.IsNullOrWhiteSpace(Model.GitHubAccount.Error))
            {
                <div class="mt-4 rounded-xl border border-amber-500/30 bg-amber-500/10 p-3 text-xs text-amber-100">
                    @Model.GitHubAccount.Error
                </div>
            }
        </div>
    </article>
</section>
