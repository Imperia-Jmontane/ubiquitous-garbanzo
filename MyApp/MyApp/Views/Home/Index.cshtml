@model MyApp.Models.Home.HomeIndexViewModel
@using System.Globalization

@{
    ViewData["Title"] = "Repositories";
}

<section class="mx-auto max-w-6xl space-y-10 py-8">
    <div class="rounded-2xl border border-white/10 bg-gray-900/70 p-8 shadow-inner shadow-black/30">
        <h1 class="text-2xl font-semibold text-white">Repository workspace</h1>
        <p class="mt-2 text-sm text-gray-300">Clone repositories to start building their flowcharts.</p>

        <form asp-action="AddRepository" method="post" class="mt-6 space-y-4" data-clone-form="true">
            @Html.AntiForgeryToken()
            <div>
                <label asp-for="AddRepository.RepositoryUrl" class="block text-sm font-medium text-gray-200"></label>
                <div class="mt-2 flex flex-col gap-2 sm:flex-row">
                    <input asp-for="AddRepository.RepositoryUrl" class="w-full rounded-lg border border-white/10 bg-black/40 px-4 py-2 text-sm text-gray-100 placeholder-gray-500 focus:border-indigo-400 focus:outline-none focus:ring-2 focus:ring-indigo-400/40" placeholder="https://github.com/owner/repository.git" data-clone-input="true" />
                    <button type="submit" class="inline-flex items-center justify-center rounded-lg bg-indigo-500 px-4 py-2 text-sm font-semibold text-white shadow-sm transition hover:bg-indigo-400 focus:outline-none focus:ring-2 focus:ring-indigo-400 focus:ring-offset-2 focus:ring-offset-gray-900" data-clone-submit="true">Clone repository</button>
                </div>
                <span asp-validation-for="AddRepository.RepositoryUrl" class="mt-1 block text-sm text-red-300" data-clone-error="true"></span>
            </div>
            <div class="rounded-lg border border-dashed border-white/10 bg-black/30 p-4 text-xs text-gray-400">
                Provide the HTTPS URL for the repository. Private repositories that your GitHub identity can access are supported.
            </div>
        </form>

        @{
            MyApp.Models.Home.CloneProgressViewModel cloneProgress = Model.CloneProgress;
            string notificationMessage = Model.Notification ?? string.Empty;
            bool hasNotification = !string.IsNullOrWhiteSpace(notificationMessage);
            bool cloneInProgress = cloneProgress.IsActive;
            string notificationTitle = cloneInProgress ? "Repository queued:" : "Repository update:";
            string operationIdValue = cloneProgress.OperationId == Guid.Empty ? string.Empty : cloneProgress.OperationId.ToString();
            string percentageValue = cloneProgress.Percentage.ToString("0.0", CultureInfo.InvariantCulture);
            string stageValue = string.IsNullOrWhiteSpace(cloneProgress.Stage) ? "Preparing repository..." : cloneProgress.Stage;
            string messageValue = cloneProgress.Message ?? string.Empty;
            string stateValue = cloneInProgress ? "Running" : "Completed";
            string repositoryUrlValue = cloneProgress.RepositoryUrl ?? string.Empty;
            double boundedProgress = Math.Max(1.0, Math.Min(cloneProgress.Percentage, 100.0));
            string boundedProgressValue = boundedProgress.ToString("0.0", CultureInfo.InvariantCulture);
        }

        <div data-clone-status-container="true"
             data-has-notification="@hasNotification.ToString().ToLowerInvariant()"
             data-notification="@notificationMessage"
             data-progress-active="@cloneInProgress.ToString().ToLowerInvariant()"
             data-operation-id="@operationIdValue"
             data-percentage="@percentageValue"
             data-stage="@stageValue"
             data-message="@messageValue"
             data-state="@stateValue"
             data-repository-url="@repositoryUrlValue">
            @if (hasNotification)
            {
                <div class="mt-6 rounded-lg border border-emerald-500/40 bg-emerald-500/10 p-4 text-sm text-emerald-200" data-clone-card="true">
                    <span class="font-semibold">@notificationTitle</span> @notificationMessage

                    @if (cloneInProgress)
                    {
                        <div class="mt-6 rounded-lg border border-white/10 bg-black/40 p-4 text-left text-gray-200" data-clone-panel="true" data-operation-id="@operationIdValue" data-repository-url="@repositoryUrlValue">
                            <h4 class="sr-only">Cloning status</h4>
                            <div class="flex items-center justify-between gap-3">
                                <p class="text-sm font-medium text-white" data-stage-label="true">@stageValue</p>
                                <span class="rounded-full border border-indigo-500/50 bg-indigo-500/20 px-2 py-1 text-xs font-semibold text-indigo-200" data-status-badge="true">In progress</span>
                            </div>
                            <div aria-hidden="true" class="mt-4 space-y-3">
                                <div class="overflow-hidden rounded-full bg-white/10">
                                    <div data-progress-bar="true" style="width: @boundedProgressValue%;" class="h-2 rounded-full bg-indigo-500 transition-all duration-500 ease-out"></div>
                                </div>
                                <div class="flex items-center justify-between text-xs font-medium text-gray-400">
                                    <span>Progress</span>
                                    <span data-progress-value="true">@percentageValue%</span>
                                </div>
                            </div>
                            <div class="mt-4 grid grid-cols-4 text-xs font-medium text-gray-400" data-progress-steps="true">
                                <div class="text-indigo-400" data-step="queued">Queued</div>
                                <div class="text-center text-gray-400" data-step="receiving">Downloading</div>
                                <div class="text-center text-gray-400" data-step="resolving">Verifying</div>
                                <div class="text-right text-gray-400" data-step="completed">Ready</div>
                            </div>
                            <p class="mt-4 text-xs text-gray-400" data-progress-message="true">
                                @if (string.IsNullOrWhiteSpace(messageValue))
                                {
                                    @:We are cloning your repository. This usually takes less than a minute.
                                }
                                else
                                {
                                    @messageValue
                                }
                            </p>
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    <div class="rounded-2xl border border-white/10 bg-gray-900/70 p-8 shadow-inner shadow-black/30">
        <div class="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
            <div>
                <h2 class="text-xl font-semibold text-white">Cloned repositories</h2>
                <p class="text-sm text-gray-300">Select a repository to inspect its available branches.</p>
            </div>
            <span class="text-sm text-gray-400">@Model.Repositories.Count repository@(Model.Repositories.Count == 1 ? string.Empty : "ies") available</span>
        </div>

        @if (!Model.HasRepositories)
        {
            <div class="mt-8 rounded-xl border border-dashed border-white/10 bg-black/30 p-6 text-sm text-gray-300">
                No repositories have been cloned yet. Use the form above to add the first repository.
            </div>
        }
        else
        {
            <ul class="mt-8 space-y-4">
                @foreach (MyApp.Models.Home.RepositoryListItemViewModel repository in Model.Repositories)
                {
                    <li class="rounded-xl border border-white/10 bg-black/40 p-6 text-sm text-gray-100">
                        <details class="group" @(repository.HasBranches ? string.Empty : "open")>
                            <summary class="flex cursor-pointer list-none items-center justify-between gap-4">
                                <div>
                                    <h3 class="text-lg font-semibold text-white">@repository.Name</h3>
                                    <p class="mt-1 truncate text-xs text-gray-400">@repository.RepositoryPath</p>
                                    @if (!string.IsNullOrWhiteSpace(repository.RemoteUrl))
                                    {
                                        <p class="mt-1 text-xs text-indigo-200">@repository.RemoteUrl</p>
                                    }
                                </div>
                                <span class="inline-flex items-center gap-2 rounded-full bg-white/10 px-3 py-1 text-xs font-medium text-gray-200">
                                    <span class="h-2 w-2 rounded-full bg-indigo-400"></span>
                                    @repository.Branches.Count branch@(repository.Branches.Count == 1 ? string.Empty : "es")
                                </span>
                            </summary>
                            <div class="mt-4 space-y-3">
                                @if (!repository.HasBranches)
                                {
                                    <p class="rounded-lg border border-dashed border-white/10 bg-black/40 px-4 py-3 text-xs text-gray-400">
                                        No local branches were found for this repository.
                                    </p>
                                }
                                else
                                {
                                    <ul class="grid gap-3 sm:grid-cols-2">
                                        @foreach (string branch in repository.Branches)
                                        {
                                            <li class="rounded-lg border border-white/10 bg-gray-900/60 px-4 py-3 text-xs text-gray-200">
                                                <span class="font-semibold text-white">@branch</span>
                                            </li>
                                        }
                                    </ul>
                                }
                            </div>
                        </details>
                    </li>
                }
            </ul>
        }
    </div>
</section>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const cloneForm = document.querySelector('[data-clone-form="true"]');
            const cloneInput = document.querySelector('[data-clone-input="true"]');
            const cloneSubmit = document.querySelector('[data-clone-submit="true"]');
            const cloneError = document.querySelector('[data-clone-error="true"]');
            const statusContainer = document.querySelector('[data-clone-status-container="true"]');

            let pollTimeoutId = null;
            let activeOperationId = null;
            let reloadScheduled = false;

            initializeFromServer();

            if (cloneForm && cloneInput && cloneSubmit) {
                cloneForm.addEventListener('submit', function (event) {
                    event.preventDefault();
                    beginCloneFromForm();
                });
            }

            function initializeFromServer() {
                if (!statusContainer) {
                    return;
                }

                const hasNotification = statusContainer.getAttribute('data-has-notification') === 'true';

                if (!hasNotification) {
                    statusContainer.innerHTML = '';
                    return;
                }

                const state = buildStateFromDataset(statusContainer.dataset);
                renderStatus(state);

                if (state.progressActive && state.operationId) {
                    startPolling(state.operationId);
                }
            }

            function beginCloneFromForm() {
                const repositoryUrl = cloneInput.value.trim();

                if (repositoryUrl.length === 0) {
                    showError('Please provide a repository URL.');
                    return;
                }

                showError('');
                setFormDisabled(true);

                const payload = {
                    repositoryUrl: repositoryUrl
                };

                fetch('/api/repositories/clone', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(payload)
                })
                    .then(function (response) {
                        if (!response.ok && response.status !== 202) {
                            return response.json().then(function (data) {
                                const message = data && data.message ? data.message : 'Failed to queue repository clone.';
                                throw new Error(message);
                            }).catch(function (error) {
                                throw new Error(error.message || 'Failed to queue repository clone.');
                            });
                        }

                        return response.json();
                    })
                    .then(function (data) {
                        if (!data) {
                            throw new Error('Unexpected response from the server.');
                        }

                        cloneInput.value = '';
                        const state = convertApiResponseToState(data);
                        renderStatus(state);

                        if (state.progressActive && state.operationId) {
                            startPolling(state.operationId);
                        } else if (state.stateName === 'Completed' && !reloadScheduled) {
                            reloadScheduled = true;
                            setTimeout(function () {
                                window.location.reload();
                            }, 800);
                        }
                    })
                    .catch(function (error) {
                        showError(error.message || 'Failed to queue repository clone.');
                    })
                    .finally(function () {
                        setFormDisabled(false);
                    });
            }

            function buildStateFromDataset(dataset) {
                return {
                    notification: dataset.notification || '',
                    repositoryUrl: dataset.repositoryUrl || '',
                    progressActive: dataset.progressActive === 'true',
                    percentage: parseFloat(dataset.percentage || '0') || 0,
                    stage: dataset.stage || '',
                    message: dataset.message || '',
                    stateName: dataset.state || 'Running',
                    operationId: dataset.operationId || ''
                };
            }

            function renderStatus(state) {
                if (!statusContainer) {
                    return;
                }

                if (!state.notification) {
                    statusContainer.innerHTML = '';
                    statusContainer.setAttribute('data-has-notification', 'false');
                    return;
                }

                const boundedPercentage = clampPercentage(state.percentage);
                const displayPercentage = boundedPercentage.toFixed(1);
                const badgeInfo = computeBadgeInfo(state.stateName, state.progressActive);
                const progressMarkup = state.progressActive
                    ? buildProgressMarkup(state, boundedPercentage, displayPercentage, badgeInfo)
                    : '';

                const cardHtml = [
                    '<div class="mt-6 rounded-lg border border-emerald-500/40 bg-emerald-500/10 p-4 text-sm text-emerald-200" data-clone-card="true">',
                    '  <div class="flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">',
                    '    <div>',
                    '      <span class="font-semibold">', escapeHtml(state.progressActive ? 'Repository queued:' : 'Repository update:'), '</span> ', escapeHtml(state.notification),
                    '    </div>',
                    state.progressActive ? '' : '    <div>' + badgeInfo.html + '</div>',
                    '  </div>',
                    progressMarkup,
                    !state.progressActive && state.message
                        ? '  <p class="mt-4 text-xs text-gray-400">' + escapeHtml(state.message) + '</p>'
                        : '',
                    '</div>'
                ].join('');

                statusContainer.innerHTML = cardHtml;
                statusContainer.setAttribute('data-has-notification', 'true');
                statusContainer.setAttribute('data-notification', state.notification);
                statusContainer.setAttribute('data-progress-active', state.progressActive ? 'true' : 'false');
                statusContainer.setAttribute('data-operation-id', state.operationId || '');
                statusContainer.setAttribute('data-percentage', state.percentage.toFixed(1));
                statusContainer.setAttribute('data-stage', state.stage || '');
                statusContainer.setAttribute('data-message', state.message || '');
                statusContainer.setAttribute('data-state', state.stateName || 'Running');
                statusContainer.setAttribute('data-repository-url', state.repositoryUrl || '');

                if (state.progressActive) {
                    const panel = statusContainer.querySelector('[data-clone-panel="true"]');

                    if (panel) {
                        updateProgressVisuals(panel, state.percentage, state.stage, state.message, state.stateName);
                    }
                }
            }

            function buildProgressMarkup(state, boundedPercentage, displayPercentage, badgeInfo) {
                const stageText = state.stage && state.stage.length > 0 ? state.stage : 'Processing repository...';
                const defaultMessage = 'We are cloning your repository. This usually takes less than a minute.';
                const messageText = state.message && state.message.length > 0 ? escapeHtml(state.message) : defaultMessage;
                const progressWidth = Math.max(1, Math.min(boundedPercentage, 100)).toFixed(1);

                return [
                    '<div class="mt-6 rounded-lg border border-white/10 bg-black/40 p-4 text-left text-gray-200" data-clone-panel="true" data-operation-id="', escapeHtml(state.operationId || ''), '" data-repository-url="', escapeHtml(state.repositoryUrl || ''), '">',
                    '  <h4 class="sr-only">Cloning status</h4>',
                    '  <div class="flex items-center justify-between gap-3">',
                    '    <p class="text-sm font-medium text-white" data-stage-label="true">', escapeHtml(stageText), '</p>',
                    '    ', badgeInfo.html,
                    '  </div>',
                    '  <div aria-hidden="true" class="mt-4 space-y-3">',
                    '    <div class="overflow-hidden rounded-full bg-white/10">',
                    '      <div data-progress-bar="true" style="width: ', progressWidth, '%;" class="h-2 rounded-full ', badgeInfo.progressClass, ' transition-all duration-500 ease-out"></div>',
                    '    </div>',
                    '    <div class="flex items-center justify-between text-xs font-medium text-gray-400">',
                    '      <span>Progress</span>',
                    '      <span data-progress-value="true">', displayPercentage, '%</span>',
                    '    </div>',
                    '  </div>',
                    '  <div class="mt-4 grid grid-cols-4 text-xs font-medium text-gray-400" data-progress-steps="true">',
                    '    <div class="text-indigo-400" data-step="queued">Queued</div>',
                    '    <div class="text-center text-gray-400" data-step="receiving">Downloading</div>',
                    '    <div class="text-center text-gray-400" data-step="resolving">Verifying</div>',
                    '    <div class="text-right text-gray-400" data-step="completed">Ready</div>',
                    '  </div>',
                    '  <p class="mt-4 text-xs text-gray-400" data-progress-message="true">', messageText, '</p>',
                    '</div>'
                ].join('');
            }

            function updateProgressVisuals(panel, percentage, stageText, messageText, stateName) {
                const progressElement = panel.querySelector('[data-progress-bar="true"]');
                const valueElement = panel.querySelector('[data-progress-value="true"]');
                const stageLabel = panel.querySelector('[data-stage-label="true"]');
                const messageElement = panel.querySelector('[data-progress-message="true"]');
                const stepsElement = panel.querySelector('[data-progress-steps="true"]');
                const badgeElement = panel.querySelector('[data-status-badge="true"]');

                const info = computeBadgeInfo(stateName, true);
                const bounded = clampPercentage(percentage);
                const width = Math.max(1, Math.min(bounded, 100)).toFixed(1);
                const display = bounded.toFixed(1);
                const safeStage = stageText && stageText.length > 0 ? stageText : 'Processing repository...';

                if (progressElement) {
                    progressElement.style.width = width + '%';
                    progressElement.classList.remove('bg-indigo-500', 'bg-emerald-500', 'bg-red-500');
                    progressElement.classList.add(info.progressClass);
                }

                if (valueElement) {
                    valueElement.textContent = display + '%';
                }

                if (stageLabel) {
                    stageLabel.textContent = safeStage;
                }

                if (messageElement) {
                    if (messageText && messageText.length > 0) {
                        messageElement.textContent = messageText;
                    } else if ((stateName || '').toLowerCase() === 'failed') {
                        messageElement.textContent = 'Repository clone failed. Please verify the URL or credentials.';
                    } else if ((stateName || '').toLowerCase() === 'completed') {
                        messageElement.textContent = 'Clone completed successfully. Preparing the repository list...';
                    } else {
                        messageElement.textContent = 'We are cloning your repository. This usually takes less than a minute.';
                    }
                }

                if (badgeElement) {
                    badgeElement.textContent = info.badgeText;
                    badgeElement.className = info.badgeClass;
                }

                if (stepsElement) {
                    updateSteps(stepsElement, safeStage, stateName);
                }
            }

            function updateSteps(stepsContainer, stageText, stateName) {
                const normalizedStage = (stageText || '').toLowerCase();
                const normalizedState = (stateName || '').toLowerCase();
                const stepElements = stepsContainer.querySelectorAll('[data-step]');

                stepElements.forEach(function (element) {
                    const step = element.getAttribute('data-step');

                    if (!step) {
                        return;
                    }

                    let active = false;

                    switch (step) {
                        case 'queued':
                            active = true;
                            break;
                        case 'receiving':
                            active = normalizedStage.indexOf('receiving') >= 0 || normalizedStage.indexOf('transfer') >= 0;
                            break;
                        case 'resolving':
                            active = normalizedStage.indexOf('resolving') >= 0 || normalizedStage.indexOf('index') >= 0;
                            break;
                        case 'completed':
                            active = normalizedStage.indexOf('complete') >= 0 || normalizedStage.indexOf('ready') >= 0 || normalizedState === 'completed';
                            break;
                        default:
                            active = false;
                            break;
                    }

                    element.classList.remove('text-indigo-400', 'text-emerald-400');

                    if (active) {
                        element.classList.remove('text-gray-400');

                        if (step === 'completed' && normalizedState === 'completed') {
                            element.classList.add('text-emerald-400');
                        } else {
                            element.classList.add('text-indigo-400');
                        }
                    } else {
                        element.classList.add('text-gray-400');
                    }
                });
            }

            function startPolling(operationId) {
                if (!operationId || operationId === '00000000-0000-0000-0000-000000000000') {
                    return;
                }

                activeOperationId = operationId;

                if (pollTimeoutId !== null) {
                    clearTimeout(pollTimeoutId);
                }

                pollTimeoutId = setTimeout(pollStatus, 1200);
            }

            function pollStatus() {
                if (!activeOperationId) {
                    return;
                }

                fetch('/api/repositories/clone/' + activeOperationId, { cache: 'no-store', credentials: 'same-origin' })
                    .then(function (response) {
                        if (!response.ok) {
                            throw new Error('Status response not available.');
                        }

                        return response.json();
                    })
                    .then(function (payload) {
                        if (!payload) {
                            return;
                        }

                        const panel = statusContainer ? statusContainer.querySelector('[data-clone-panel="true"]') : null;
                        const percentage = typeof payload.percentage === 'number'
                            ? payload.percentage
                            : parseFloat(payload.percentage || '0');
                        const stageText = payload.stage || '';
                        const messageText = payload.message || '';
                        const stateName = payload.state || 'Running';

                        if (panel) {
                            updateProgressVisuals(panel, percentage, stageText, messageText, stateName);
                        }

                        statusContainer.setAttribute('data-percentage', (parseFloat(percentage) || 0).toFixed(1));
                        statusContainer.setAttribute('data-stage', stageText);
                        statusContainer.setAttribute('data-message', messageText);
                        statusContainer.setAttribute('data-state', stateName);

                        const normalizedState = stateName.toLowerCase();

                        if (normalizedState === 'completed') {
                            activeOperationId = null;

                            if (!reloadScheduled) {
                                reloadScheduled = true;
                                setTimeout(function () {
                                    window.location.reload();
                                }, 1200);
                            }
                        } else if (normalizedState === 'failed') {
                            activeOperationId = null;
                        } else {
                            scheduleNextPoll(2000);
                        }
                    })
                    .catch(function () {
                        if (activeOperationId) {
                            scheduleNextPoll(4000);
                        }
                    });
            }

            function scheduleNextPoll(delayMilliseconds) {
                if (pollTimeoutId !== null) {
                    clearTimeout(pollTimeoutId);
                }

                pollTimeoutId = setTimeout(pollStatus, delayMilliseconds);
            }

            function showError(message) {
                if (cloneError) {
                    cloneError.textContent = message || '';
                }
            }

            function setFormDisabled(disabled) {
                if (!cloneSubmit) {
                    return;
                }

                if (disabled) {
                    cloneSubmit.setAttribute('disabled', 'disabled');
                    cloneSubmit.classList.add('opacity-70');
                } else {
                    cloneSubmit.removeAttribute('disabled');
                    cloneSubmit.classList.remove('opacity-70');
                }
            }

            function convertApiResponseToState(data) {
                const status = data.status || null;
                const operationId = data.operationId && data.operationId !== '00000000-0000-0000-0000-000000000000'
                    ? data.operationId
                    : '';
                const percentage = status && typeof status.percentage === 'number'
                    ? status.percentage
                    : status && status.percentage
                        ? parseFloat(status.percentage)
                        : 0;
                const stateName = status && status.state
                    ? status.state
                    : (data.alreadyCloned ? 'Completed' : (operationId ? 'Running' : 'Completed'));
                const stage = status && status.stage ? status.stage : '';
                const message = status && status.message ? status.message : '';
                const progressActive = operationId.length > 0 && stateName !== 'Completed' && stateName !== 'Failed';

                return {
                    notification: data.notification || '',
                    repositoryUrl: data.repositoryUrl || '',
                    progressActive: progressActive,
                    percentage: percentage || 0,
                    stage: stage,
                    message: message,
                    stateName: stateName,
                    operationId: operationId
                };
            }

            function computeBadgeInfo(stateName, progressActive) {
                const normalized = (stateName || '').toLowerCase();
                let badgeText = 'In progress';
                let badgeClass = 'rounded-full border border-indigo-500/50 bg-indigo-500/20 px-2 py-1 text-xs font-semibold text-indigo-200';
                let progressClass = 'bg-indigo-500';

                if (normalized === 'completed') {
                    badgeText = progressActive ? 'Completed' : 'Ready';
                    badgeClass = 'rounded-full border border-emerald-500/50 bg-emerald-500/20 px-2 py-1 text-xs font-semibold text-emerald-200';
                    progressClass = 'bg-emerald-500';
                } else if (normalized === 'failed') {
                    badgeText = 'Failed';
                    badgeClass = 'rounded-full border border-red-500/50 bg-red-500/20 px-2 py-1 text-xs font-semibold text-red-200';
                    progressClass = 'bg-red-500';
                } else if (normalized === 'queued') {
                    badgeText = 'Queued';
                }

                return {
                    badgeText: badgeText,
                    badgeClass: badgeClass,
                    progressClass: progressClass,
                    html: '<span class="' + badgeClass + '" data-status-badge="true">' + escapeHtml(badgeText) + '</span>'
                };
            }

            function escapeHtml(value) {
                if (value === null || value === undefined) {
                    return '';
                }

                return String(value)
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/\"/g, '&quot;')
                    .replace(/'/g, '&#39;');
            }

            function clampPercentage(value) {
                if (!Number.isFinite(value)) {
                    return 0;
                }

                if (value < 0) {
                    return 0;
                }

                if (value > 100) {
                    return 100;
                }

                return value;
            }
        });
    </script>
    <partial name="_ValidationScriptsPartial" />
}
